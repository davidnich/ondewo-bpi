# Copyright 2021 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# [AUTO-GENERATED FILE]

from abc import ABCMeta, abstractmethod

import grpc
from google.longrunning.operations_grpc_pb2 import Operation
from google.protobuf.empty_pb2 import Empty
from ondewo.nlu import intent_pb2
from ondewo.nlu.client import Client
from ondewo.nlu.intent_pb2_grpc import IntentsServicer
from ondewologging.logger import logger


class AutoIntentsServicer(IntentsServicer):
    """
    [AUTO-GENERATED CLASS]
    generated by: grpc_auto_coder.py
    DO NOT ALTER CODE UNLESS YOU WANT TO DO IT EVERY TIME YOU GENERATE IT!

    used to relay endpoints to the functions defined in:
      >> ./ondewo-nlu-client-python/ondewo/nlu/services/intents.py
    any child class is expected to have a .client attribute to send the service calls to (metaclass-enforced)
    all function/endpoint calls are logged
    override functions if other functionality than a client call is needed

    [original docstring]
    An intent represents a mapping between input from a user and an action to

    """
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def client(self) -> Client:
        pass

    def ListIntents(self, request: intent_pb2.ListIntentsRequest, context: grpc.ServicerContext) -> intent_pb2.ListIntentsResponse:
        """
        [AUTO-GENERATED FUNCTION]
        Returns the list of all intents in the specified agent.

        """
        logger.info("relaying ListIntents() to nlu-client...")
        response = self.client.services.intents.list_intents(request=request)
        return response

    def GetIntent(self, request: intent_pb2.GetIntentRequest, context: grpc.ServicerContext) -> intent_pb2.Intent:
        """
        [AUTO-GENERATED FUNCTION]
        Retrieves the specified intent.

        """
        logger.info("relaying GetIntent() to nlu-client...")
        response = self.client.services.intents.get_intent(request=request)
        return response

    def CreateIntent(self, request: intent_pb2.CreateIntentRequest, context: grpc.ServicerContext) -> intent_pb2.Intent:
        """
        [AUTO-GENERATED FUNCTION]
        Creates an intent in the specified agent.

        """
        logger.info("relaying CreateIntent() to nlu-client...")
        response = self.client.services.intents.create_intent(request=request)
        return response

    def UpdateIntent(self, request: intent_pb2.UpdateIntentRequest, context: grpc.ServicerContext) -> intent_pb2.Intent:
        """
        [AUTO-GENERATED FUNCTION]
        Updates the specified intent.

        """
        logger.info("relaying UpdateIntent() to nlu-client...")
        response = self.client.services.intents.update_intent(request=request)
        return response

    def DeleteIntent(self, request: intent_pb2.DeleteIntentRequest, context: grpc.ServicerContext) -> Empty:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes the specified intent.

        """
        logger.info("relaying DeleteIntent() to nlu-client...")
        response = self.client.services.intents.delete_intent(request=request)
        return response

    def BatchUpdateIntents(self, request: intent_pb2.BatchUpdateIntentsRequest, context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Updates/Creates multiple intents in the specified agent.

        """
        logger.info("relaying BatchUpdateIntents() to nlu-client...")
        response = self.client.services.intents.batch_update_intents(request=request)
        return response

    def BatchDeleteIntents(self, request: intent_pb2.BatchDeleteIntentsRequest, context: grpc.ServicerContext) -> Operation:
        """
        [AUTO-GENERATED FUNCTION]
        Deletes intents in the specified agent.

        """
        logger.info("relaying BatchDeleteIntents() to nlu-client...")
        response = self.client.services.intents.batch_delete_intents(request=request)
        return response

# [make flake8 shut up]
